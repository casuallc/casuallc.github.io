{"meta":{"title":"一叶扁舟","subtitle":"","description":"闲着没事，随便写写。随便看看即可，对内容正确性、真实性不能保证。","author":"安可","url":"https://casuallc.github.io","root":"/"},"pages":[{"title":"","date":"2024-02-07T06:37:20.678Z","updated":"2024-02-07T06:37:20.678Z","comments":true,"path":"404.html","permalink":"https://casuallc.github.io/404.html","excerpt":"","text":""},{"title":"个人介绍","date":"2023-04-06T11:43:22.066Z","updated":"2023-04-06T11:43:22.066Z","comments":true,"path":"about/index.html","permalink":"https://casuallc.github.io/about/index.html","excerpt":"","text":"地点：深圳职业：程序员Github：https://github.com/casuallcWeixin：waiting2092"},{"title":"推荐网站","date":"2023-04-05T09:57:07.763Z","updated":"2023-04-05T09:57:07.763Z","comments":true,"path":"friends/index.html","permalink":"https://casuallc.github.io/friends/index.html","excerpt":"","text":"www.google.com"},{"title":"","date":"2023-04-05T10:09:53.723Z","updated":"2023-04-05T10:09:53.723Z","comments":true,"path":"mylist/index.html","permalink":"https://casuallc.github.io/mylist/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2024-02-07T03:57:18.752Z","updated":"2024-02-07T03:57:18.752Z","comments":true,"path":"categories/index.html","permalink":"https://casuallc.github.io/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2024-02-07T03:57:10.452Z","updated":"2024-02-07T03:57:10.452Z","comments":true,"path":"tags/index.html","permalink":"https://casuallc.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"基于 valine 和 leancloud 的评论系统","slug":"基于-valine-和-leancloud-的评论系统","date":"2024-02-08T06:36:48.000Z","updated":"2024-02-08T07:01:37.692Z","comments":true,"path":"2024/02/08/基于-valine-和-leancloud-的评论系统/","permalink":"https://casuallc.github.io/2024/02/08/%E5%9F%BA%E4%BA%8E-valine-%E5%92%8C-leancloud-%E7%9A%84%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/","excerpt":"评论系统基于 hexo next 主题搭建博客后，测试了几种评论系统，像畅言、Gitalk 等都需要登陆后才能评论，实际用起来比较繁琐，而且评论的人基于安全的考虑也不会授权第三方评论系统获得自己的账号授权。 试想，一个偶然发现的网站，一个没怎么听到过的系统，怎么会允许获取自己的账号授权呢。","text":"评论系统基于 hexo next 主题搭建博客后，测试了几种评论系统，像畅言、Gitalk 等都需要登陆后才能评论，实际用起来比较繁琐，而且评论的人基于安全的考虑也不会授权第三方评论系统获得自己的账号授权。 试想，一个偶然发现的网站，一个没怎么听到过的系统，怎么会允许获取自己的账号授权呢。 leancloud &amp; valineleancloud 是一个云计算平台，可以在上边创建应用，然后通过 http 或者其他方式调用平台对外提供的接口。最重要的是，平台提供的接口调用和存储功能都免费！！！ 而 valine 就是基于这一特性，在 hexo 主题中嵌入评论插件，用户提交评论时会发数据发送到 leancloud 对外开放的接口，从而实现保存评论信息。 而且，该插件不需要登录。这样评论本身就没有了限制，大家可以畅所欲言，比畅言更畅言。但这种方式对博主本身的安全性有一定的影响，比如恶意评论导致 leancloud 的接口频繁调用。 接入方式下面是以 NexT(7.8.0) 为例进行接入说明。 注册 leancloud登录 leancloud 注册账号。 注意一定要用国际版，国内版存在个人信息验证问题！！！ 注册成功并登录后，需要邮箱验证。 验证成功后就可以创建自己的应用了，在首页点击：Create App 选择开发者模式 创建完成过后点【设置】查看 app id 等信息。 图上标记的信息需要在下面 NexT 主题中配置。 配置 NexT在 _config.yml 中找到评论相关配置，设置评论方式为 valine，然后设置 app id 等信息 12345678910comments: # Choose a comment system to be displayed by default. # Available values: changyan | disqus | disqusjs | gitalk | livere | valine active: valinevaline: enable: true appid: xxxx # Your leancloud application appid appkey: xxxx # Your leancloud application appkey serverURLs: https://xxxx # 会往这个地址中发送数据 效果","categories":[{"name":"2024","slug":"2024","permalink":"https://casuallc.github.io/categories/2024/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://casuallc.github.io/tags/%E6%95%99%E7%A8%8B/"},{"name":"工具","slug":"工具","permalink":"https://casuallc.github.io/tags/%E5%B7%A5%E5%85%B7/"}],"author":"changqing"},{"title":"Spring Bean 生命周期","slug":"Spring-Bean-生命周期","date":"2024-02-07T01:33:00.000Z","updated":"2024-02-08T04:11:55.537Z","comments":true,"path":"2024/02/07/Spring-Bean-生命周期/","permalink":"https://casuallc.github.io/2024/02/07/Spring-Bean-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/","excerpt":"Spring Bean 生命周期spring 在初始化时会通过注解或者配置文件初始化所有的 bean，在初始化过程中支持执行自定义的逻辑，比如加载配置等。spring bean 的生命周期如下图所示：","text":"Spring Bean 生命周期spring 在初始化时会通过注解或者配置文件初始化所有的 bean，在初始化过程中支持执行自定义的逻辑，比如加载配置等。spring bean 的生命周期如下图所示： 其中 BeanPostProcessor 是对所有 Bean 进行拦截， InitializingBean 是对当前 Bean 进行拦截。所以如果需要在一个 Bean 初始化时做一些初始化的工作，则要实现 InitializingBean 接口。示例如下 1234567891011121314151617import org.springframework.beans.BeansException;import org.springframework.beans.factory.config.BeanPostProcessor;import org.springframework.stereotype.Component;@Componentpublic class TestBeanInit implements BeanPostProcessor &#123; @Override public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException &#123; return BeanPostProcessor.super.postProcessBeforeInitialization(bean, beanName); &#125; @Override public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException &#123; return BeanPostProcessor.super.postProcessAfterInitialization(bean, beanName); &#125;&#125; 实现该接口后会在每个 Bean 初始化时都进行拦截，因此会传递当前初始化的 Bean。 12345678910111213import org.springframework.beans.factory.InitializingBean;import org.springframework.stereotype.Component;@Componentpublic class TestBeanInit implements InitializingBean &#123; private String name; @Override public void afterPropertiesSet() throws Exception &#123; name = &quot;123&quot;; &#125;&#125; 该接口只会在当前 Bean 初始化时执行。","categories":[{"name":"2024","slug":"2024","permalink":"https://casuallc.github.io/categories/2024/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://casuallc.github.io/tags/%E6%95%99%E7%A8%8B/"},{"name":"学习","slug":"学习","permalink":"https://casuallc.github.io/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"Spring Boot","slug":"Spring-Boot","permalink":"https://casuallc.github.io/tags/Spring-Boot/"}],"author":"changqing"},{"title":"Hexo 使用","slug":"Hexo-使用","date":"2024-02-06T09:23:07.000Z","updated":"2024-02-08T04:14:18.560Z","comments":true,"path":"2024/02/06/Hexo-使用/","permalink":"https://casuallc.github.io/2024/02/06/Hexo-%E4%BD%BF%E7%94%A8/","excerpt":"使用 Hexo 搭建网站 这里只是记录一些关键点，具体操作步骤参考官网：https://hexo.io/ 创建新文章生成文章 1hexo new &#x27;title&#x27; 设置目录和标签通过 tags、categories 设置，如下 1234tags: - 教程categories:- 2024","text":"使用 Hexo 搭建网站 这里只是记录一些关键点，具体操作步骤参考官网：https://hexo.io/ 创建新文章生成文章 1hexo new &#x27;title&#x27; 设置目录和标签通过 tags、categories 设置，如下 1234tags: - 教程categories:- 2024 上传图片把图片放到 &#x2F;source&#x2F;imgs&#x2F; 下，通过如下方式引用： 1![window 桌面图片](/imgs/2024/20240205.jpg) // markdown 语法 编译成静态 HTML 文件 1hexo g 本地启动服务，预览结果 1hexo s 部署到 Github需要在 _config.yml 中配置 github 地址和推送分支信息然后依次执行以下命令： 123hexo cleanhexo ghexo d 其他知识点设置目录 二级及以下的标题为文章内右侧目录 categories 可以设置层级，依次在下方列出即可 tags 可以设置多个 首页只显示文章概览信息 在文章中添加 &lt;!-- more --&gt;，则改符号之后的内容会隐藏。","categories":[{"name":"2024","slug":"2024","permalink":"https://casuallc.github.io/categories/2024/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://casuallc.github.io/tags/%E6%95%99%E7%A8%8B/"}],"author":"changqing"},{"title":"测试文章","slug":"hello-world","date":"2023-04-05T08:16:39.621Z","updated":"2024-02-08T04:11:32.323Z","comments":true,"path":"2023/04/05/hello-world/","permalink":"https://casuallc.github.io/2023/04/05/hello-world/","excerpt":"Pulsar 异地容灾多集群部署这种方式利用了消息的异步复制功能。在两个数据中心分别部署独立的集群，然后通过配置建立两个集群间的消息复制通道，这样其中一个集群收到的消息都会通过异步的方式发送到另外一个集群。正常情况下，客户端可以通过一个集群实现消息的发布和订阅，另外一个集群只是作为备份。当提供服务的集群不可用时，客户端主动切换到备份集群。备份集群保存了之前集群的所有数据（由于是异步复制，最新消息可能有部分丢失），客户端就可以通过备份集群继续处理消息。同时，客户端发送到备份集群的消息会在之前集群恢复后发送到之前的集群。","text":"Pulsar 异地容灾多集群部署这种方式利用了消息的异步复制功能。在两个数据中心分别部署独立的集群，然后通过配置建立两个集群间的消息复制通道，这样其中一个集群收到的消息都会通过异步的方式发送到另外一个集群。正常情况下，客户端可以通过一个集群实现消息的发布和订阅，另外一个集群只是作为备份。当提供服务的集群不可用时，客户端主动切换到备份集群。备份集群保存了之前集群的所有数据（由于是异步复制，最新消息可能有部分丢失），客户端就可以通过备份集群继续处理消息。同时，客户端发送到备份集群的消息会在之前集群恢复后发送到之前的集群。 基于地区的数据副本保存策略这种方式利用了消息的同步复制功能。即在多个数据中心建立一个大集群，每个地区的计算节点收到消息后都会通过同步的方式发送到多个数据中心的存储节点，从而保证一条消息的多个副本分散在多个数据中心（ADMQ会根据存储节点的配置信息区分不同数据中心的节点，消息写入时就可以确保消息写入到多个数据中心的节点）。这样一个数据中心不可用时，客户端可以读取到存在其他数据中心的消息。这种方案能确保不会丢失消息，但是延迟会比第一种高一点。","categories":[],"tags":[],"author":"changqing"}],"categories":[{"name":"2024","slug":"2024","permalink":"https://casuallc.github.io/categories/2024/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://casuallc.github.io/tags/%E6%95%99%E7%A8%8B/"},{"name":"工具","slug":"工具","permalink":"https://casuallc.github.io/tags/%E5%B7%A5%E5%85%B7/"},{"name":"学习","slug":"学习","permalink":"https://casuallc.github.io/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"Spring Boot","slug":"Spring-Boot","permalink":"https://casuallc.github.io/tags/Spring-Boot/"}]}